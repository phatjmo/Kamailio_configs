#!KAMAILIO
#
# 
#                           \\\|///
#                          \\ - - //
#                           ( @ @ )
#O-----------------------oOOo-(_)-oOOo-----------------------------------O
#|                                                                       |
#| SIP over WebSocket (with double registration) server config           |
#|                 ogolosovskiy@nordigy.ru                               |
#|                                                                       |
#| Kamailio version  https://github.com/sipwise/mediaproxy-ng.git master |
#| Modules include_modules=tls websocket rtpproxy-ng                     |
#| Media proxy  https://github.com/sipwise/mediaproxy-ng.git master      |
#|                                                                       |
#|                               Oooo                                    |
#O------------------------oooO---(  )------------------------------------O
#                         (   )  ) /
#                          \ (  (_/
#                           \_)


##!substdef "!MY_IP_ADDR!x.x.x.x!g"
#!substdef "!MY_DOMAIN!x!g"
#!substdef "!MY_DOMAIN_FULL!MY_DOMAIN:5060!g"
#!substdef "!MY_WS_PORT!80!g"
#!substdef "!MY_WSS_PORT!443!g"
#!substdef "!MY_SIP_ADDR!MY_IP_ADDR:5060!g"
#!substdef "!MY_WS_ADDR!tcp:MY_IP_ADDR:MY_WS_PORT!g"
#!substdef "!MY_WSS_ADDR!tls:MY_IP_ADDR:MY_WSS_PORT!g"
#!substdef "!SBC_IP!x.x.x.x!g"
#!substdef "!SBC_PORT!5090!g"
#!substdef "!SBC_ADDR!SBC_IP:SBC_PORT!g"
#!substdef "!MAX_MESSAGE_SIZE!2048!g"

# #!define LOCAL_TEST_RUN
# #!define WITH_TLS
#!define WITH_WEBSOCKETS

# /usr/local/sbin/kamailio -m 1024  -w /usr/local/ -f /usr/local/etc/kamailio/openser-w2s.cfg
# /usr/sbin/mediaproxy-ng -i 192.209.30.16 -p /var/run/mediaproxy-ng.pid -m 35000 -M 45000 --listen-ng=5561

####### Global Parameters #########

fork=yes
children=4

log_facility=LOG_LOCAL0
debug=4
auto_aliases=no
mpath="/usr/local/lib64/kamailio/modules_k/:/usr/local/lib64/kamailio/modules/"

#!ifdef WITH_TLS
enable_tls=1
#!endif

listen=MY_SIP_ADDR
#!ifdef WITH_WEBSOCKETS
listen=MY_WS_ADDR
#!ifdef WITH_TLS
listen=MY_WSS_ADDR
#!endif
#!endif

tcp_connection_lifetime=3604
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384

# syn_branch=0


loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "avpops.so"
loadmodule "kex.so"
loadmodule "mi_rpc.so"
loadmodule "corex.so"
#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif
#!ifdef WITH_WEBSOCKETS
loadmodule "xhttp.so"
loadmodule "websocket.so"
loadmodule "nathelper.so"
#!endif

# RTP-PROXY-NG
loadmodule "rtpproxy-ng"
modparam("rtpproxy-ng", "rtpproxy_sock", "udp:localhost:5561")

# ----------------- setting module-specific parameters ---------------


# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
modparam("registrar", "max_expires", 3600)
modparam("registrar", "gruu_enabled", 0)

# ----- usrloc params -----
modparam("usrloc", "db_url", "DBURL")
modparam("usrloc", "db_mode", 0)

# ----- auth params -----
# modparam("auth", "nonce_count", 1)
# modparam("auth", "qop", "auth")

# ----- auth_db params -----
# modparam("auth_db", "db_url", "DBURL")
# modparam("auth_db", "calculate_ha1", yes)
# modparam("auth_db", "password_column", "password")
# modparam("auth_db", "load_credentials", "id")

# ----- corex params -----
modparam("corex", "alias_subdomains", "MY_DOMAIN")
modparam("corex", "alias_subdomains", "MY_DOMAIN_FULL")
modparam("corex", "alias_subdomains", "MY_SIP_ADDR") 


#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "tls_method", "SSLv23")
modparam("tls", "verify_certificate", 0)
modparam("tls", "require_certificate", 0)
modparam("tls", "certificate", "/usr/local/etc/kamailio/kamailio-selfsigned.pem")
modparam("tls", "private_key", "/usr/local/etc/kamailio/kamailio-selfsigned.key")

#!endif

#!ifdef WITH_WEBSOCKETS
# ----- nathelper params -----
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
# Note: leaving NAT pings turned off here as nathelper is _only_ being used for
#       WebSocket connections.  NAT pings are not needed as WebSockets have
#       their own keep-alives.
#!endif


####### Routing Logic ########

# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
# - note: this is the same as route { ... }
request_route {

	# per request initial checks
	route(REQINIT);

#!ifdef WITH_WEBSOCKETS
	if (nat_uac_test(64)) {
		# Do NAT traversal stuff for requests from a WebSocket
		# connection - even if it is not behind a NAT!
		# This won't be needed in the future if Kamailio and the
		# WebSocket client support Outbound and Path.
		force_rport();
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			if (!add_contact_alias()) {
				xlog("L_ERR", "Error aliasing contact <$ct>\n");
				sl_send_reply("400", "Bad Request");
				exit;
			}
		}
	}
#!endif

	# handle requests within SIP dialogs
	route(WITHINDLG);

	# OPTIONS processing
    if (uri == myself && is_method("OPTIONS") && !(uri=~"sip:.*[@]+.*")) {
      options_reply();
      exit;
    }

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			t_relay();
		}
		exit;
	}

	t_check_trans();

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");

   	# REGISTER processing
    if (is_method("REGISTER")) {
      route(REGISTER_REQUEST);	
      route(RELAY);
    }

   	# INVITE processing
	route(INVITE_REQUEST);	

	# user location service
    if ($Rp != MY_WS_PORT && $Rp != MY_WSS_PORT) {
	    route(LOCATION);
	  }

	route(RELAY);
}

route[RELAY] {

	if (uri == myself) {
	  if (!t_relay_to_udp("SBC_IP", "SBC_PORT")) 
	     sl_reply_error();
	}

    if (!t_relay()) 
	     sl_reply_error();

    exit;
}

# Per SIP request initial checks
route[REQINIT] {

  # Logging the request
  if (is_method("CANCEL|BYE|ACK"))
    xlog("L_NOTICE", "$rm [$cs] ($ci)\n");
  else
    xlog("L_NOTICE", "$rm $fu ($au) -> $tU ($ru) [$cs] ($ci) $si:$sp - $ua\n");

  if (($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT) && !(proto == WS || proto == WSS)) {
	xlog("L_WARN", "SIP (UDP/TCP/TLS) request received on $Rp (HTTP/HTTPS Port)\n");
	sl_send_reply("403", "Forbidden");
	exit;
  }

  if (src_port!=SBC_PORT && src_ip!=SBC_IP && (proto != WS || proto != WSS))
  {
	xlog("L_WARN", "only SBC UDP|TCP|TLS requests are allowed\n");
	sl_send_reply("403", "Forbidden");
	exit;
  }

  if (msg:len >=  MAX_MESSAGE_SIZE) {
    sl_send_reply("513", "Message too big. MAX_MESSAGE_SIZE bytes limit (W2S).");
    xlog("L_WARN", "Message too big\n");
    exit;
  }

  # Loop prevention
  if (!mf_process_maxfwd_header('10')) {
    sl_send_reply('483','Too Many Hops. (W2S)');
    xlog("L_WARN", "Too many hops\n");
    exit;
  }

  if (!sanity_check("1511", "7")) {
    xlog("L_WARN", "Malformed SIP message from $si:$sp\n");
    exit;
  }
 
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
#!ifdef WITH_WEBSOCKETS
			if ($du == "") {
				if (!handle_ruri_alias()) {
					xlog("L_ERR", "Bad alias <$ru>\n");
					sl_send_reply("400", "Bad Request");
					exit;
				}
			}
#!endif
			route(RELAY);
		} else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction...
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404", "Not Found");
		}
		exit;
	}
}

route[INVITE_REQUEST] {
    # http://kamailio.org/docs/modules/devel/modules/rtpproxy-ng.html
    # 5.2.  rtpproxy_offer
    # s/s srtp off/on
    # p/p advanced rtcp profile with feedback off/on
    # c - flags to change the session-level sdp connection (c=)

    if (is_method("INVITE")) {
      if ($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT) {
        xlog("L_NOTICE", "WS Convert SDP any->AVP\n");
	rtpproxy_manage("cosp");
      }
      else {
        xlog("L_NOTICE", "UDP Convert SDP any->SAVPF\n");
	rtpproxy_manage("coSP");
      }
      record_route();
    }
}	


route[REGISTER_REQUEST] {
    if (is_method("REGISTER")) {
      if (!t_newtran()) {
        sl_reply_error();
        exit;
      }

      route(REGISTRAR);
      route(PATH_REGISTER_REQUEST);
      t_on_reply("REGISTER_REPLY");
    }
}

# Handle SIP registrations
route[REGISTRAR] {

  xlog("L_NOTICE", "REGISTRAR $ct\n");
  # flags (optional) - the value may be a bitwise OR of the 
  # following flags:
  # 0x01 - only in memory cache without no DB operation;
  # 0x02 - do not generate a SIP reply 
  if (!save("location", "0x03")) {
    sl_reply_error();
  }

}

# double register (we register W2S server on SBC)
route[PATH_REGISTER_REQUEST] {

    # store location to From Name for correct reply
    $avp(g_webrtc_stream_id) = $(ct{s.substr,5,29});
    $var(expires) = $(ct{re.subst,/.*expires=([0-9]*).*/\1/g});
    # xlog("L_NOTICE", "Test1 avp:$avp(g_webrtc_stream_id) Exp $var(expires)");
    # avp_print();
    # rewrite Contact information

    xlog("L_NOTICE", "PATH_REGISTER  $avp(g_webrtc_stream_id) -> sip:$fU@MY_SIP_ADDR \n");

    remove_hf("Contact");
    # TODO OGO #!substdef "!CONTACT_TAG!local_web_address!g" dosent work in regular expr
    append_hf("Contact: <sip:$fU@MY_SIP_ADDR;transport=udp>;expires=$var(expires)\r\n","From");
}


# USER location service
route[LOCATION] {

	if (!lookup("location")) {
		$var(rc) = $rc;
		xlog("L_NOTICE", "lookup result: $var(rc) \n");
		switch ($var(rc)) {
		case -1:
			# send_reply("480", "Temporarily Unavailable");
			xlog("L_NOTICE", "Unknown $ru, traverse through \n");
			break;
		case -2:
			xlog("L_ERR", "Unknown method. Cant locate user.\n");
			send_reply("405", "Method Not Allowed");
			exit;
		case -3:
			xlog("L_ERR", "location service error\n");
			send_reply("500", "Server Internal Error");
			exit;
		default:
			xlog("L_ERR", "Impossible, Unknown LookUp  Error $var(rc) \n");
			send_reply("500", "Server Internal Error");
		}
	}
	else {

	     # If there are such contacts, Request-URI will be overwritten with 
	     # the contact that has the highest q value and optionally the rest 
	     # will be appended to the message (depending on append_branches parameter value). 
	     xlog("L_NOTICE", "found registered user ReqUri:$ru To:$tu \n");
	}
}

#!ifdef WITH_WEBSOCKETS
onreply_route {

    xlog("L_NOTICE", "$rr ($rs) [$cs] ($ci) $si:$sp - $ua\n");

	if (($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT)
		&& !(proto == WS || proto == WSS)) {
		xlog("L_WARN", "SIP response received on $Rp\n");
		drop;
		exit;
	}

	if (nat_uac_test(64)) {
		# Do NAT traversal stuff for replies to a WebSocket connection
		# - even if it is not behind a NAT!
		# This won't be needed in the future if Kamailio and the
		# WebSocket client support Outbound and Path.
		add_contact_alias();
	}

	if (is_method("INVITE")) {
        if ($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT) {
	    xlog("L_NOTICE", "Convert SDP any->AVP\n");
	    rtpproxy_manage("cosp");
	  }
	  else
	  {
	    xlog("L_NOTICE", "Convert SDP any->SAVPF\n");
	    rtpproxy_manage("coSP");
	  }
	}
}

onreply_route[REGISTER_REPLY] {
			      
    if(is_method("REGISTER"))
      {
       if(status=="200") {
	     $var(cstr) = $hdr(Contact);
	     $var(expires) = $(var(cstr){re.subst,/.*expires=([0-9]*).*/\1/g});
	     # avp_print();
	     # xlog("L_NOTICE", "Test2 cstr:$var(cstr) avp0:$avp(g_webrtc_stream_id)  web_id:$var(web_id) expires:$var(expires)");
	     remove_hf("Contact");
	     append_hf("Contact: <sip:$avp(g_webrtc_stream_id);transport=ws>;expires=$var(expires)\r\n","CSeq");
	   }
      }
}

event_route[xhttp:request] {
	set_reply_close();
	set_reply_no_connect();
	
	if ($Rp != MY_WS_PORT
#!ifdef WITH_TLS
	    && $Rp != MY_WSS_PORT
#!endif
	) {
		xlog("L_WARN", "HTTP request received on $Rp\n");
		xhttp_reply("403", "Forbidden", "", "");
		exit;
	}

	xlog("L_DBG", "HTTP Request Received\n");

	if ($hdr(Upgrade)=~"websocket"
			&& $hdr(Connection)=~"Upgrade"
			&& $rm=~"GET") {

		# Validate Host - make sure the client is using the correct
		# alias for WebSockets
		if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
			xlog("L_WARN", "Bad host $hdr(Host)\n");
			xhttp_reply("403", "Forbidden", "", "");
			exit;
		}

		# Optional... validate Origin - make sure the client is from an
		# authorised website.  For example,
		#
		# if ($hdr(Origin) != "http://communicator.MY_DOMAIN"
		#     && $hdr(Origin) != "https://communicator.MY_DOMAIN") {
		#	xlog("L_WARN", "Unauthorised client $hdr(Origin)\n");
		#	xhttp_reply("403", "Forbidden", "", "");
		#	exit;
		# }

		# Optional... perform HTTP authentication

		# ws_handle_handshake() exits (no further configuration file
		# processing of the request) when complete.
		if (ws_handle_handshake())
		{
			# Optional... cache some information about the
			# successful connection
			exit;
		}
	}

	xhttp_reply("404", "Not Found", "", "");
}

event_route[websocket:closed] {
	xlog("L_INFO", "WebSocket connection from $si:$sp has closed\n");
}
#!endif
